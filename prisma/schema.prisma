
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  lectures      Lecture[]
  presentations Presentation[]
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id              String   @id @default(cuid())
  title           String
  content         String
  articleImage    String?
  publisherName   String
  publisherImage  String?
  readDuration    Int      @default(5)
  published       Boolean  @default(false)
  order           Int      @default(0) 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  direction       String   @default("ltr")
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Add these two lines:
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("articles")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("tags")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  id              String   @id @default(cuid())
  name            String
  bannerImageUrl  String?
  parentId        String?
  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories   Category[] @relation("CategoryHierarchy")
  lectures        Lecture[]
  presentations   Presentation[]
  events          Event[]
  articles        Article[]     // <-- ADD THIS LINE
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("categories")
}

model Lecture {
  id              String   @id @default(cuid())
  title           String
  description     String
  videoUrl        String?
  duration        String
  date            String?
  bannerImageUrl  String?
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("lectures")
}

model Presentation {
  id              String   @id @default(cuid())
  title           String
  description     String
  content         String
  imageUrls       String[]
  published       Boolean  @default(true)
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("presentations")
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String
  eventType       String
  location        String?
  onlineUrl       String?
  eventDate       DateTime
  eventTime       String?
  bannerImageUrl  String?
  published       Boolean  @default(false)
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("events")
}